{"version":3,"sources":["utils/FormatCurrency.ts","config.ts","hooks/useBalance.ts","hooks/useExchangeRates.ts","utils/Contexts.ts","common-styles/colors.ts","components/LoadingPage/style.ts","components/LoadingPage/LoadingPage.tsx","components/LoadingPage/index.ts","components/DataProvider/DataProvider.tsx","components/DataProvider/index.ts","components/ErrorBoundary/index.ts","components/ErrorBoundary/ErrorBoundary.tsx","common-styles/page.ts","utils/ConvertRate.ts","components/ExchangePage/style.ts","models/Operation.ts","components/CurrencyInput/style.ts","components/CurrencyInput/CurrencyInput.tsx","components/CurrencyInput/index.ts","utils/NumberInput.ts","utils/FilterCurrencies.ts","components/CurrencySelection/style.ts","components/CurrencySelection/CurrencySelection.tsx","components/CurrencySelection/index.ts","components/CurrencyInputPair/style.ts","components/CurrencyInputPair/CurrencyInputPair.tsx","components/CurrencyInputPair/index.ts","hooks/useExchange.ts","components/SuccessfulExchangeNotification/style.ts","components/SuccessfulExchangeNotification/SuccessfulExchangeNotification.tsx","components/SuccessfulExchangeNotification/index.ts","utils/FormatAmount.ts","components/ExchangePage/ExchangePage.tsx","components/ExchangePage/index.ts","components/App/style.ts","components/App/App.tsx","components/App/index.ts","reportWebVitals.ts","i18n.ts","index.tsx"],"names":["getFormatCurrency","symbolPos","spacesInBetween","amount","spaces","repeat","this","symbol","openExchangeRatesUrl","availableCurrencies","code","label","format","useBalance","useState","balance","setBalance","useEffect","newBalance","reduce","acc","currency","i","Error","useExchangeRates","exchangeRates","setExchangeRates","apiCallCount","setApiCallCount","areStale","setAreStale","intervalId","setInterval","count","clearInterval","fetch","Math","random","then","res","json","result","rates","catch","BalanceContext","React","createContext","c","ExchangeRatesContext","Colors","Object","freeze","Shadow","AppBackground","ButtonBackground","ErrorBackground","ErrorNotificationBackground","PanelBackground","DominantBackground","DominantBackgroundDisabled","ErrorText","PrimaryText","SecondaryText","DominantBackgroundText","DominantText","rotate","keyframes","Wrapper","styled","div","IconWrapper","LoadingPage","data-testid","DataProvider","children","isBalanceLoading","getBalance","modifyBalance","areRatesStale","Provider","value","ErrorBoundary","props","state","hasError","error","Component","Page","convertRate","from","to","toFixed","Operation","ErrorNotification","Layout","TopSection","ExchangeRate","Title","h1","span","BottomSection","ExchangeButton","button","TopLine","CurrencyCode","Input","input","BottomLine","CurrencyInput","sign","onChange","onCurrencyClick","onFocus","onBlur","t","useTranslation","isBalanceExceeded","handleChange","val","s","valWithoutSign","startsWith","slice","lastSymbol","length","valArr","Array","toString","every","includes","validateNumber","prettifyNumber","role","onClick","e","target","inputMode","maxLength","placeholder","lc","toLowerCase","CurrencyItem","li","LogoWrapper","Logo","img","dialog","Header","h2","Seach","SeachLabel","CurrencyLabel","CurrencySelection","onClose","onSelect","query","setQuery","isSearchFocused","setIsSearchFocused","useContext","currencyItems","filter","filterCurrenciesPredicate","map","currencyBalance","src","process","setTimeout","autoFocus","InputPair","section","OperationSwitchWrapper","OperationSwitch","CurrencyInputPair","operation","onOperationChange","onActiveInputChange","inputBeingChanged","setInputBeingChanged","handleCurrencyClick","handleFocus","handleBlur","Buy","onValueChange","Sell","onCurrencyChange","useExchange","fromCurrency","toCurrency","buyAmount","buyAmountRounded","round","sellAmountRounded","Panel","Summary","SuccessfulExchangeNotification","fromAmount","toAmount","id","clearTimeout","formatAmount","removeZeros","amountStr","dotIndex","indexOf","slicePos","min","ExchangePage","setOperation","isSuccessNotificationOpen","setIsSuccessNotificationOpen","activeInput","setActiveInput","fromValue","setFromValue","toValue","setToValue","setFromCurrency","setToCurrency","fromBalance","toBalance","buyingCurrency","sellingCurrency","buyingAmount","sellingAmount","commitExchange","updateFromValue","updateToValue","isFromBalanceExceeded","isToBalanceExceeded","isExchangeButtonDisabled","getUpdateValueFn","sourceInput","newValue","srcCurrency","destCurrency","setDestValue","convertedValue","swapCurrencies","priceForOneUnit","newOperation","disabled","curOne","curTwo","Container","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","i18n","use","initReactI18next","init","resources","en","translation","lng","fallbackLng","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.532439ab.chunk.js","sourcesContent":["import Currency from '../models/Currency';\n\nexport function getFormatCurrency(\n    symbolPos: 'left' | 'right',\n    spacesInBetween: number\n): (amount: number | string) => string {\n    return function (this: Currency, amount) {\n        const spaces = ' '.repeat(spacesInBetween);\n        return symbolPos === 'left'\n            ? `${this.symbol}${spaces}${amount}`\n            : `${amount}${spaces}${this.symbol}`;\n    };\n}\n","import Currency from './models/Currency';\r\nimport { getFormatCurrency } from './utils/FormatCurrency';\r\n\r\nconst openExchangeRatesAppId = '3cabd2c7471b4b778cd0de69c5470fae';\r\nexport const openExchangeRatesUrl = `https://openexchangerates.org/api/latest.json?app_id=${openExchangeRatesAppId}`;\r\n\r\nexport const availableCurrencies: Currency[] = [\r\n    {\r\n        code: 'CZK',\r\n        label: 'czech_koruna',\r\n        symbol: 'Kč',\r\n        format: getFormatCurrency('left', 1),\r\n    },\r\n    {\r\n        code: 'GBP',\r\n        label: 'pound_sterling',\r\n        symbol: '£',\r\n        format: getFormatCurrency('left', 0),\r\n    },\r\n    {\r\n        code: 'EUR',\r\n        label: 'euro',\r\n        symbol: '€',\r\n        format: getFormatCurrency('left', 0),\r\n    },\r\n    {\r\n        code: 'PLN',\r\n        label: 'poland_zloty',\r\n        symbol: 'zł',\r\n        format: getFormatCurrency('left', 1),\r\n    },\r\n    {\r\n        code: 'USD',\r\n        label: 'united_states_dollar',\r\n        symbol: '$',\r\n        format: getFormatCurrency('left', 0),\r\n    },\r\n];\r\n","import { useEffect, useState } from 'react';\nimport { availableCurrencies } from '../config';\nimport Balance from '../models/Balance';\nimport Currency from '../models/Currency';\n\nfunction useBalance(): [\n    boolean,\n    (currency: Currency) => number | null,\n    (amount: number, currency: Currency) => void\n] {\n    const [balance, setBalance] = useState<Balance | null>(null);\n\n    useEffect(() => {\n        const newBalance: Balance = availableCurrencies.reduce(\n            (acc, currency, i) => ({\n                ...acc,\n                [currency.code]: i * 10000,\n            }),\n            {}\n        );\n        setBalance(newBalance);\n    }, []);\n\n    function modifyBalance(amount: number, currency: Currency) {\n        setBalance(balance => {\n            if (!balance || balance[currency.code] === null) {\n                throw new Error('balance is null');\n            }\n\n            return {\n                ...balance,\n                [currency.code]: balance[currency.code] + amount,\n            };\n        });\n    }\n\n    const getBalance = (currency: Currency) =>\n        balance?.[currency.code] != null ? balance[currency.code] / 100 : null;\n\n    return [!balance, getBalance, modifyBalance];\n}\n\nexport default useBalance;\n","import { useEffect, useState } from 'react';\nimport { openExchangeRatesUrl } from '../config';\nimport ExchangeRates from '../models/ExchangeRates';\n\nfunction useExchangeRates(): [ExchangeRates | null, boolean] {\n    const [exchangeRates, setExchangeRates] = useState<ExchangeRates | null>(\n        null\n    );\n    const [apiCallCount, setApiCallCount] = useState(1);\n    const [areStale, setAreStale] = useState(false);\n\n    useEffect(() => {\n        const intervalId = setInterval(\n            () => setApiCallCount(count => count + 1),\n            10000\n        );\n        return () => clearInterval(intervalId);\n    }, []);\n\n    useEffect(() => {\n        fetch(`${openExchangeRatesUrl}&random=${Math.random()}`)\n            .then(res => res.json())\n            .then(result => setExchangeRates(result.rates))\n            .then(() => setAreStale(false))\n            .catch(() => setAreStale(true));\n    }, [apiCallCount]);\n\n    return [exchangeRates, areStale];\n}\n\nexport default useExchangeRates;\n","import React from 'react';\nimport Currency from '../models/Currency';\nimport ExchangeRates from '../models/ExchangeRates';\n\nexport const BalanceContext = React.createContext<\n    [\n        (currency: Currency) => number | null,\n        (amount: number, currency: Currency) => void\n    ]\n>([(c: Currency) => null, (amount: number, currency: Currency) => {}]);\n\nexport const ExchangeRatesContext = React.createContext<\n    [ExchangeRates, boolean]\n>([{}, false]);\n","export const Colors = Object.freeze({\n    Shadow: 'rgba(10, 10, 10, 0.5)',\n    AppBackground: '#000',\n    ButtonBackground: '#151515',\n    ErrorBackground: '#42120e',\n    ErrorNotificationBackground: '#b23027',\n    PanelBackground: '#2b2b2d',\n    DominantBackground: '#0a84ff',\n    DominantBackgroundDisabled: '#021a34',\n\n    ErrorText: '#ca534d',\n    PrimaryText: '#c0c0c0',\n    SecondaryText: '#c0c0c0',\n    DominantBackgroundText: '#fff',\n    DominantText: '#1066dd',\n});\n","import styled, { keyframes } from 'styled-components';\r\nimport { Colors } from '../../common-styles/colors';\r\n\r\nconst rotate = keyframes`\r\n  from {\r\n    transform: rotate(0deg);\r\n  }\r\n\r\n  to {\r\n    transform: rotate(360deg);\r\n  }\r\n`;\r\n\r\nexport const Wrapper = styled.div`\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n`;\r\n\r\nexport const IconWrapper = styled.div`\r\n    width: 60px;\r\n    height: 60px;\r\n    color: ${Colors.DominantText};\r\n    font-size: 60px;\r\n    animation: ${rotate} 4s linear infinite;\r\n`;\r\n","import React from 'react';\nimport { BiLoaderCircle } from 'react-icons/bi';\nimport { IconWrapper, Wrapper } from './style';\n\nfunction LoadingPage() {\n    return (\n        <Wrapper>\n            <IconWrapper>\n                <BiLoaderCircle data-testid=\"loading-icon\" />\n            </IconWrapper>\n        </Wrapper>\n    );\n}\n\nexport default LoadingPage;\n","import LoadingPage from './LoadingPage';\r\n\r\nexport default LoadingPage;\r\n","import React from 'react';\r\nimport { availableCurrencies } from '../../config';\r\nimport useBalance from '../../hooks/useBalance';\r\nimport useExchangeRates from '../../hooks/useExchangeRates';\r\nimport { BalanceContext, ExchangeRatesContext } from '../../utils/Contexts';\r\nimport LoadingPage from '../LoadingPage';\r\n\r\ntype DataProviderProps = {\r\n    children?: React.ReactNode;\r\n};\r\n\r\nfunction DataProvider({ children }: DataProviderProps) {\r\n    const [isBalanceLoading, getBalance, modifyBalance] = useBalance();\r\n    const [exchangeRates, areRatesStale] = useExchangeRates();\r\n\r\n    if (isBalanceLoading || !exchangeRates) {\r\n        return <LoadingPage />;\r\n    }\r\n\r\n    return (\r\n        <BalanceContext.Provider value={[getBalance, modifyBalance]}>\r\n            <ExchangeRatesContext.Provider\r\n                value={[exchangeRates, areRatesStale]}\r\n            >\r\n                {children}\r\n            </ExchangeRatesContext.Provider>\r\n        </BalanceContext.Provider>\r\n    );\r\n}\r\n\r\nexport default DataProvider;\r\n","import DataProvider from './DataProvider';\r\n\r\nexport default DataProvider;\r\n","import ErrorBoundary from './ErrorBoundary';\r\n\r\nexport default ErrorBoundary;\r\n","import React from 'react';\r\n\r\ninterface Props {}\r\ninterface State {\r\n    hasError: boolean;\r\n}\r\n\r\nclass ErrorBoundary extends React.Component<Props, State> {\r\n    constructor(props: any) {\r\n        super(props);\r\n        this.state = { hasError: false };\r\n    }\r\n\r\n    static getDerivedStateFromError(error: any) {\r\n        return { hasError: true };\r\n    }\r\n\r\n    render() {\r\n        if (this.state.hasError) {\r\n            return <h1>Something went wrong.</h1>;\r\n        }\r\n\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;\r\n","import styled from 'styled-components';\n\nexport const Page = styled.div`\n    width: 100%;\n    max-width: 600px;\n    padding: 20px;\n`;\n","import Currency from '../models/Currency';\nimport ExchangeRates from '../models/ExchangeRates';\n\nexport function convertRate(\n    amount: number,\n    from: Currency,\n    to: Currency,\n    exchangeRates: ExchangeRates\n) {\n    const amountUSD = amount / exchangeRates[from.code];\n    return (amountUSD * exchangeRates[to.code]).toFixed(4);\n}\n","import styled from 'styled-components';\nimport { Colors } from '../../common-styles/colors';\n\nexport const Wrapper = styled.div`\n    display: flex;\n    flex-direction: column;\n    height: 100%;\n`;\n\nexport const ErrorNotification = styled.div`\n    padding: 10px;\n    margin-bottom: 20px;\n    background-color: ${Colors.ErrorNotificationBackground};\n    border-radius: 10px;\n    color: ${Colors.DominantBackgroundText};\n    text-align: center;\n`;\n\nexport const Layout = styled.div`\n    display: flex;\n    flex-direction: column;\n    justify-content: space-between;\n    height: 100%;\n`;\n\nexport const TopSection = styled.div``;\n\nexport const ExchangeRate = styled.div`\n    display: flex;\n    color: ${Colors.DominantText};\n    margin: 8px 0 16px 0;\n`;\n\nexport const Title = styled.h1`\n    color: ${Colors.PrimaryText};\n`;\n\nexport const IconWrapper = styled.span`\n    display: flex;\n    align-items: center;\n    height: 19px;\n`;\n\nexport const BottomSection = styled.div``;\n\nexport const ExchangeButton = styled.button`\n    width: 100%;\n    padding: 16px;\n    border: none;\n    border-radius: 20px;\n    color: ${Colors.DominantBackgroundText};\n    background-color: ${Colors.DominantBackground};\n    cursor: pointer;\n    font-size: 16px;\n\n    &:disabled {\n        color: ${Colors.PrimaryText};\n        background-color: ${Colors.DominantBackgroundDisabled};\n        cursor: default;\n    }\n`;\n","export enum Operation {\n    Buy = 'buy',\n    Sell = 'sell',\n}\n\nexport default Operation;","import styled from 'styled-components';\nimport { Colors } from '../../common-styles/colors';\n\nexport const Wrapper = styled.div<{ hasError: boolean }>`\n    padding: 20px;\n    background-color: ${({ hasError }) =>\n        hasError ? Colors.ErrorBackground : Colors.PanelBackground};\n    border-radius: 16px;\n`;\n\nexport const TopLine = styled.div`\n    display: flex;\n    margin-bottom: 6px;\n    color: ${Colors.PrimaryText};\n`;\n\nexport const CurrencyCode = styled.button`\n    display: flex;\n    margin-right: 10px;\n    background-color: transparent;\n    border: none;\n    color: ${Colors.PrimaryText};\n    font-size: 18px;\n    font-weight: bold;\n    cursor: pointer;\n`;\n\nexport const Input = styled.input`\n    flex-grow: 1;\n    width: 100%;\n    padding: 0 8px;\n    text-align: right;\n    background-color: transparent;\n    border: none;\n    font-size: 18px;\n    color: ${Colors.PrimaryText};\n`;\n\nexport const IconWrapper = styled.span`\n    display: flex;\n    align-items: center;\n    height: 20px;\n    padding-left: 6px;\n`;\n\nexport const BottomLine = styled.div`\n    display: flex;\n    justify-content: space-between;\n    color: ${Colors.SecondaryText};\n`;\n\nexport const Error = styled.span`\n    padding-right: 8px;\n    color: ${Colors.ErrorText};\n`;\n","import { useTranslation } from 'react-i18next';\nimport { MdKeyboardArrowDown } from 'react-icons/md';\nimport Currency from '../../models/Currency';\nimport { prettifyNumber, validateNumber } from '../../utils/NumberInput';\nimport {\n    BottomLine,\n    CurrencyCode,\n    Error,\n    IconWrapper,\n    Input,\n    TopLine,\n    Wrapper,\n} from './style';\n\ntype CurrencyInputProps = {\n    balance: number;\n    currency: Currency;\n    sign: string;\n    value: string;\n    onChange: (value: string) => void;\n    onCurrencyClick: () => void;\n    onFocus: () => void;\n    onBlur: () => void;\n};\n\nfunction CurrencyInput({\n    currency,\n    balance,\n    sign,\n    value,\n    onChange,\n    onCurrencyClick,\n    onFocus,\n    onBlur,\n}: CurrencyInputProps) {\n    const { t } = useTranslation();\n    const isBalanceExceeded = sign === '-' && +value > balance;\n\n    function removeSign(s: string) {\n        if (s.startsWith('-') || s.startsWith('+')) {\n            return s.slice(1);\n        }\n        return s;\n    }\n\n    function handleChange(val: string) {\n        let valWithoutSign = removeSign(val);\n        if (!validateNumber(valWithoutSign)) {\n            return;\n        }\n        onChange(prettifyNumber(valWithoutSign));\n    }\n\n    return (\n        <Wrapper hasError={isBalanceExceeded} role=\"group\">\n            <TopLine>\n                <CurrencyCode onClick={onCurrencyClick} data-testid=\"change-currency-button\">\n                    {currency.code}\n                    <IconWrapper>\n                        <MdKeyboardArrowDown />\n                    </IconWrapper>\n                </CurrencyCode>\n                <Input\n                    value={value ? sign + value : value}\n                    onChange={e => handleChange(e.target.value)}\n                    onFocus={onFocus}\n                    onBlur={onBlur}\n                    inputMode=\"numeric\"\n                    maxLength={13}\n                    placeholder=\"0\"\n                />\n            </TopLine>\n            <BottomLine>\n                <span data-testid=\"balance\">\n                    {t('balance')}: {balance}\n                </span>\n                {isBalanceExceeded && (\n                    <Error role=\"alert\">{t('exceed_balance')}</Error>\n                )}\n            </BottomLine>\n        </Wrapper>\n    );\n}\n\nexport default CurrencyInput;\n","import CurrencyInput from './CurrencyInput';\n\nexport default CurrencyInput;\n","export function validateNumber(val: string) {\n    const validSymbols = '0123456789.';\n    const lastSymbol = val[val.length - 1];\n    const valArr = Array.from(val.toString());\n    if (!lastSymbol) {\n        return true;\n    }\n    if (!valArr.every(c => validSymbols.includes(c))) {\n        return false;\n    }\n\n    const dotAmount = valArr.reduce(\n        (amount, c) => amount + (c === '.' ? 1 : 0),\n        0\n    );\n    if (dotAmount > 1) {\n        return false;\n    }\n\n    return true;\n}\n\nexport function prettifyNumber(val: string) {\n    if (val.length === 2 && val.startsWith('0')) {\n        val = val.slice(1);\n    }\n    if (val === '.') {\n        val = '0.';\n    }\n    return val;\n}\n","import { TFunction } from 'i18next';\nimport Currency from '../models/Currency';\n\nconst lc = (s: string) => s.toLowerCase();\n\nexport const filterCurrenciesPredicate =\n    (query: string, t: TFunction) => (currency: Currency) =>\n        lc(currency.code).includes(lc(query)) ||\n        lc(t(currency.label)).includes(lc(query));\n","import styled from 'styled-components';\nimport { Colors } from '../../common-styles/colors';\n\nexport const CurrencyItem = styled.li`\n    display: flex;\n    padding: 10px 0;\n    cursor: pointer;\n`;\n\nexport const LogoWrapper = styled.div`\n    flex: 34px 0 0;\n    padding-right: 20px;\n`;\n\nexport const Logo = styled.img`\n    width: 100%;\n    border-radius: 100%;\n`;\n\nexport const Wrapper = styled.dialog`\n    display: flex;\n    justify-content: center;\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100vw;\n    height: 100vh;\n    z-index: 100;\n    background-color: black;\n    color: ${Colors.PrimaryText};\n`;\n\nexport const Header = styled.h2`\n    display: flex;\n    height: 28px;\n    margin-bottom: 20px;\n`;\n\nexport const IconWrapper = styled.span`\n    display: flex;\n    align-items: center;\n    height: 27px;\n    padding-right: 16px;\n    cursor: pointer;\n`;\n\nexport const Seach = styled.input`\n    width: 100vw;\n    padding-left: 6px;\n    background-color: transparent;\n    border: none;\n    color: ${Colors.PrimaryText};\n    font-size: 16px;\n`;\n\nexport const SeachLabel = styled.div`\n    display: flex;\n    justify-content: space-between;\n    width: 100%;\n`;\n\nexport const CurrencyLabel = styled.div`\n    font-size: 12px;\n`;\n","import { useContext, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { AiOutlineSearch } from 'react-icons/ai';\nimport { IoMdArrowBack } from 'react-icons/io';\nimport { Page } from '../../common-styles/page';\nimport { availableCurrencies } from '../../config';\nimport Currency from '../../models/Currency';\nimport { BalanceContext } from '../../utils/Contexts';\nimport { filterCurrenciesPredicate } from '../../utils/FilterCurrencies';\nimport {\n    CurrencyItem,\n    CurrencyLabel,\n    Header,\n    IconWrapper,\n    Logo,\n    LogoWrapper,\n    Seach,\n    SeachLabel,\n    Wrapper,\n} from './style';\n\ntype CurrencySelectionProps = {\n    onClose: () => void;\n    onSelect: (currency: Currency) => void;\n};\n\nfunction CurrencySelection({ onClose, onSelect }: CurrencySelectionProps) {\n    const { t } = useTranslation();\n    const [query, setQuery] = useState('');\n    const [isSearchFocused, setIsSearchFocused] = useState(true);\n    const [getBalance] = useContext(BalanceContext);\n\n    function handleBlur() {\n        setIsSearchFocused(false);\n\n        // delay to avoid briefly showing the full list on currency select\n        setTimeout(() => {\n            setQuery('');\n        }, 100);\n    }\n\n    const currencyItems = availableCurrencies\n        .filter(filterCurrenciesPredicate(query, t))\n        .map(currency => {\n            const currencyBalance = getBalance(currency);\n\n            return (\n                <CurrencyItem\n                    key={currency.code}\n                    onClick={() => onSelect(currency)}\n                >\n                    <LogoWrapper>\n                        <Logo\n                            src={`${\n                                process.env.PUBLIC_URL\n                            }/img/${currency.code.toLowerCase()}.svg`}\n                        />\n                    </LogoWrapper>\n                    <div>\n                        <div>\n                            {currency.code}{' '}\n                            {(currencyBalance || null) && (\n                                <span>· {currencyBalance}</span>\n                            )}\n                        </div>\n                        <CurrencyLabel>\n                            {t(`currency.${currency.label}`)}\n                        </CurrencyLabel>\n                    </div>\n                </CurrencyItem>\n            );\n        });\n\n    return (\n        <Wrapper>\n            <Page>\n                <Header>\n                    <IconWrapper onClick={onClose}>\n                        <IoMdArrowBack />\n                    </IconWrapper>\n                    {!isSearchFocused && (\n                        <SeachLabel>\n                            {t('choose_source')}\n                            <IconWrapper>\n                                <AiOutlineSearch\n                                    onClick={() => setIsSearchFocused(true)}\n                                />\n                            </IconWrapper>\n                        </SeachLabel>\n                    )}\n                    {isSearchFocused && (\n                        <Seach\n                            value={query}\n                            onBlur={handleBlur}\n                            onChange={e => setQuery(e.target.value)}\n                            autoFocus={true}\n                        ></Seach>\n                    )}\n                </Header>\n                <div>\n                    <ul>{currencyItems}</ul>\n                </div>\n            </Page>\n        </Wrapper>\n    );\n}\n\nexport default CurrencySelection;\n","import CurrencySelection from './CurrencySelection';\n\nexport default CurrencySelection;\n","import styled from 'styled-components';\nimport { Colors } from '../../common-styles/colors';\n\nexport const InputPair = styled.section`\n    display: flex;\n    flex-direction: column;\n`;\n\nexport const OperationSwitchWrapper = styled.div`\n    margin: -8px 0;\n    text-align: center;\n    z-index: 10;\n`;\n\nexport const OperationSwitch = styled.button`\n    width: 24px;\n    height: 24px;\n    padding: 4px;\n    border: none;\n    border-radius: 100%;\n    background-color: ${Colors.ButtonBackground};\n    color: ${Colors.DominantText};\n    cursor: pointer;\n`;\n","import React, { useState } from 'react';\nimport CurrencyInput from '../CurrencyInput';\nimport Currency from '../../models/Currency';\nimport Operation from '../../models/Operation';\nimport CurrencySelection from '../CurrencySelection';\nimport { InputPair, OperationSwitchWrapper, OperationSwitch } from './style';\nimport { BsArrowDown, BsArrowUp } from 'react-icons/bs';\n\ntype CurrencyInputConfig = {\n    balance: number;\n    currency: Currency;\n    onCurrencyChange: (cur: Currency) => void;\n    value: string;\n    onValueChange: (val: string) => void;\n};\n\ntype CurrencyInputPairProps = {\n    from: CurrencyInputConfig;\n    to: CurrencyInputConfig;\n    operation: Operation;\n    onActiveInputChange: (input: 'from' | 'to' | null) => void;\n    onOperationChange: () => void;\n};\n\nfunction CurrencyInputPair({\n    from,\n    to,\n    operation,\n    onOperationChange,\n    onActiveInputChange,\n}: CurrencyInputPairProps) {\n    const [inputBeingChanged, setInputBeingChanged] =\n        useState<CurrencyInputConfig | null>(null);\n\n    function handleCurrencyClick(input: CurrencyInputConfig) {\n        setInputBeingChanged(input);\n    }\n\n    function handleCurrencySelect(currency: Currency) {\n        inputBeingChanged?.onCurrencyChange(currency);\n        setInputBeingChanged(null);\n    }\n\n    function handleFocus(input: 'from' | 'to') {\n        onActiveInputChange(input);\n    }\n\n    function handleBlur() {\n        onActiveInputChange(null);\n    }\n\n    return (\n        <>\n            <InputPair role=\"region\">\n                <CurrencyInput\n                    currency={from.currency}\n                    balance={from.balance}\n                    value={from.value}\n                    sign={operation === Operation.Buy ? '+' : '-'}\n                    onChange={value => from.onValueChange(value)}\n                    onCurrencyClick={() => handleCurrencyClick(from)}\n                    onFocus={() => handleFocus('from')}\n                    onBlur={() => handleBlur()}\n                ></CurrencyInput>\n                <OperationSwitchWrapper>\n                    <OperationSwitch\n                        onClick={() => onOperationChange()}\n                        data-testid=\"operation\"\n                    >\n                        {operation === Operation.Buy && (\n                            <BsArrowUp data-testid=\"arrow-up\" />\n                        )}\n                        {operation === Operation.Sell && (\n                            <BsArrowDown data-testid=\"arrow-down\" />\n                        )}\n                    </OperationSwitch>\n                </OperationSwitchWrapper>\n                <CurrencyInput\n                    currency={to.currency}\n                    balance={to.balance}\n                    value={to.value}\n                    sign={operation === Operation.Sell ? '+' : '-'}\n                    onChange={value => to.onValueChange(value)}\n                    onCurrencyClick={() => handleCurrencyClick(to)}\n                    onFocus={() => handleFocus('to')}\n                    onBlur={() => handleBlur()}\n                ></CurrencyInput>\n            </InputPair>\n            {inputBeingChanged && (\n                <CurrencySelection\n                    onClose={() => setInputBeingChanged(null)}\n                    onSelect={handleCurrencySelect}\n                ></CurrencySelection>\n            )}\n        </>\n    );\n}\n\nexport default CurrencyInputPair;\n","import CurrencyInputPair from './CurrencyInputPair';\n\nexport default CurrencyInputPair;\n","import { useContext } from 'react';\r\nimport Currency from '../models/Currency';\r\nimport ExchangeRates from '../models/ExchangeRates';\r\nimport { BalanceContext, ExchangeRatesContext } from '../utils/Contexts';\r\nimport { convertRate } from '../utils/ConvertRate';\r\n\r\nfunction useExchange(\r\n    fromCurrency: Currency,\r\n    toCurrency: Currency\r\n): (amount: number) => void {\r\n    const [exchangeRates] = useContext(ExchangeRatesContext);\r\n    const [getBalance, modifyBalance] = useContext(BalanceContext);\r\n\r\n    return (buyAmount: number) => {\r\n        const buyAmountRounded = Math.round(buyAmount * 100);\r\n        const sellAmountRounded = Math.round(\r\n            +convertRate(\r\n                buyAmountRounded,\r\n                fromCurrency,\r\n                toCurrency,\r\n                exchangeRates as ExchangeRates\r\n            )\r\n        );\r\n\r\n        modifyBalance(buyAmountRounded, fromCurrency);\r\n        modifyBalance(-sellAmountRounded, toCurrency);\r\n    };\r\n}\r\n\r\nexport default useExchange;\r\n","import styled from 'styled-components';\nimport { Colors } from '../../common-styles/colors';\n\nexport const Shadow = styled.div`\n    display: flex;\n    justify-content: center;\n    align-items: flex-end;\n    position: fixed;\n    left: 0;\n    right: 0;\n    top: 0;\n    bottom: 0;\n    background-color: ${Colors.Shadow};\n`;\n\nexport const Panel = styled.div`\n    padding: 50px 0;\n    background-color: ${Colors.PanelBackground};\n    color: ${Colors.PrimaryText};\n    border-radius: 20px;\n    font-size: 20px;\n    font-weight: 500;\n    text-align: center;\n    cursor: pointer;\n`;\n\nexport const IconWrapper = styled.div`\n    margin-bottom: 10px;\n    color: ${Colors.DominantText};\n    font-size: 80px;\n    text-align: center;\n`;\n\nexport const Summary = styled.div`\n    margin-top: 8px;\n    color: ${Colors.DominantText};\n`;\n","import React from 'react';\nimport { useEffect } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { BsCheckCircle } from 'react-icons/bs';\nimport { Page } from '../../common-styles/page';\nimport Currency from '../../models/Currency';\nimport { IconWrapper, Panel, Shadow, Summary } from './style';\n\ntype SuccessfulExchangeNotificationProps = {\n    fromCurrency: Currency;\n    fromAmount: string;\n    toCurrency: Currency;\n    toAmount: string;\n    onClose: () => void;\n};\n\nfunction SuccessfulExchangeNotification({\n    fromCurrency,\n    fromAmount,\n    toCurrency,\n    toAmount,\n    onClose,\n}: SuccessfulExchangeNotificationProps) {\n    const { t } = useTranslation();\n\n    useEffect(() => {\n        const id = setTimeout(onClose, 2500);\n\n        return () => clearTimeout(id);\n    }, [onClose]);\n\n    return (\n        <Shadow>\n            <Page>\n                <Panel onClick={onClose} role=\"alertdialog\">\n                    <IconWrapper>\n                        <BsCheckCircle></BsCheckCircle>\n                    </IconWrapper>\n                    {t('you_exchanged')}\n                    <Summary>\n                        {t('exchange_summary', {\n                            from: fromCurrency.format(fromAmount),\n                            to: toCurrency.format(toAmount),\n                        })}\n                    </Summary>\n                </Panel>\n            </Page>\n        </Shadow>\n    );\n}\n\nexport default SuccessfulExchangeNotification;\n","import SuccessfulExchangeNotification from './SuccessfulExchangeNotification';\n\nexport default SuccessfulExchangeNotification;\n","export function formatAmount(amount: string | number, removeZeros = false) {\n    const amountStr = amount.toString();\n    const dotIndex = amountStr.indexOf('.');\n    if (dotIndex === -1) return amountStr;\n\n    let slicePos = Math.min(dotIndex + 3, amountStr.length);\n    if (removeZeros) {\n        while (slicePos > dotIndex && ['0', '.'].includes(amountStr[slicePos - 1])) {\n            slicePos--;\n        }\n    }\n\n    return amountStr.slice(0, slicePos);\n}\n","import React, { useState } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { Page } from '../../common-styles/page';\r\nimport { availableCurrencies } from '../../config';\r\nimport ExchangeRates from '../../models/ExchangeRates';\r\nimport { convertRate } from '../../utils/ConvertRate';\r\nimport {\r\n    BottomSection,\r\n    ErrorNotification,\r\n    ExchangeButton,\r\n    ExchangeRate,\r\n    IconWrapper,\r\n    Layout,\r\n    Title,\r\n    TopSection,\r\n    Wrapper,\r\n} from './style';\r\nimport Operation from '../../models/Operation';\r\nimport CurrencyInputPair from '../CurrencyInputPair';\r\nimport { AiOutlineLineChart } from 'react-icons/ai';\r\nimport useExchange from '../../hooks/useExchange';\r\nimport { useContext } from 'react';\r\nimport { BalanceContext, ExchangeRatesContext } from '../../utils/Contexts';\r\nimport SuccessfulExchangeNotification from '../SuccessfulExchangeNotification';\r\nimport Currency from '../../models/Currency';\r\nimport { formatAmount } from '../../utils/FormatAmount';\r\nimport { useEffect } from 'react';\r\n\r\nfunction ExchangePage() {\r\n    const { t } = useTranslation();\r\n    const [operation, setOperation] = useState(Operation.Buy);\r\n    const [isSuccessNotificationOpen, setIsSuccessNotificationOpen] =\r\n        useState(false);\r\n    const [activeInput, setActiveInput] = useState<'from' | 'to' | null>(null);\r\n    const [exchangeRates, areRatesStale] = useContext(ExchangeRatesContext);\r\n\r\n    const [fromValue, setFromValue] = useState('');\r\n    const [toValue, setToValue] = useState('');\r\n\r\n    let [fromCurrency, setFromCurrency] = useState(availableCurrencies[1]);\r\n    let [toCurrency, setToCurrency] = useState(availableCurrencies[2]);\r\n\r\n    const [getBalance] = useContext(BalanceContext);\r\n    const fromBalance = getBalance(fromCurrency);\r\n    const toBalance = getBalance(toCurrency);\r\n\r\n    const buyingCurrency =\r\n        operation === Operation.Buy ? fromCurrency : toCurrency;\r\n    const sellingCurrency =\r\n        operation === Operation.Sell ? fromCurrency : toCurrency;\r\n    const buyingAmount = operation === Operation.Buy ? fromValue : toValue;\r\n    const sellingAmount = operation === Operation.Sell ? fromValue : toValue;\r\n    const commitExchange = useExchange(buyingCurrency, sellingCurrency);\r\n\r\n    useEffect(() => {\r\n        if (\r\n            activeInput === 'from' ||\r\n            (!activeInput && operation === Operation.Buy)\r\n        ) {\r\n            updateFromValue(fromValue); //trigger rate recalculation\r\n        } else {\r\n            updateToValue(toValue); //trigger rate recalculation\r\n        }\r\n    }, [exchangeRates, fromCurrency, toCurrency]);\r\n\r\n    const isFromBalanceExceeded =\r\n        operation === Operation.Sell && +fromValue > (fromBalance || 0);\r\n    const isToBalanceExceeded =\r\n        operation === Operation.Buy && +toValue > (toBalance || 0);\r\n    const isBalanceExceeded = isFromBalanceExceeded || isToBalanceExceeded;\r\n\r\n    const isExchangeButtonDisabled =\r\n        isBalanceExceeded || !fromValue || areRatesStale;\r\n\r\n    function toggleOperation() {\r\n        const newOperation =\r\n            operation === Operation.Buy ? Operation.Sell : Operation.Buy;\r\n        setOperation(newOperation);\r\n    }\r\n\r\n    function exchange() {\r\n        commitExchange(+buyingAmount);\r\n        setIsSuccessNotificationOpen(true);\r\n    }\r\n\r\n    function getUpdateValueFn(sourceInput: 'from' | 'to') {\r\n        return (newValue: string) => {\r\n            const srcCurrency =\r\n                sourceInput === 'from' ? fromCurrency : toCurrency;\r\n            const setSrcValue =\r\n                sourceInput === 'from' ? setFromValue : setToValue;\r\n\r\n            const destCurrency =\r\n                sourceInput === 'from' ? toCurrency : fromCurrency;\r\n            const setDestValue =\r\n                sourceInput === 'from' ? setToValue : setFromValue;\r\n\r\n            const formattedSrcValue = formatAmount(newValue);\r\n            setSrcValue(formattedSrcValue);\r\n\r\n            if (newValue) {\r\n                const convertedValue = convertRate(\r\n                    +formatAmount(newValue),\r\n                    srcCurrency,\r\n                    destCurrency,\r\n                    exchangeRates as ExchangeRates\r\n                );\r\n                const formattedDestValue = formatAmount(\r\n                    (+convertedValue).toFixed(2),\r\n                    true\r\n                );\r\n                setDestValue(formattedDestValue);\r\n            } else {\r\n                setDestValue('');\r\n            }\r\n        };\r\n    }\r\n    const updateFromValue = getUpdateValueFn('from');\r\n    const updateToValue = getUpdateValueFn('to');\r\n\r\n    function swapCurrencies() {\r\n        setFromCurrency(toCurrency);\r\n        setToCurrency(fromCurrency);\r\n        [fromCurrency, toCurrency] = [toCurrency, fromCurrency];\r\n    }\r\n\r\n    function updateFromCurrency(currency: Currency) {\r\n        currency === toCurrency ? swapCurrencies() : setFromCurrency(currency);\r\n    }\r\n\r\n    function updateToCurrency(currency: Currency) {\r\n        currency === fromCurrency ? swapCurrencies() : setToCurrency(currency);\r\n    }\r\n\r\n    if (fromBalance === null || toBalance === null) return <div></div>;\r\n\r\n    const priceForOneUnit = convertRate(\r\n        1,\r\n        fromCurrency,\r\n        toCurrency,\r\n        exchangeRates as ExchangeRates\r\n    );\r\n\r\n    return (\r\n        <>\r\n            <Page>\r\n                <Wrapper>\r\n                    {areRatesStale && (\r\n                        <ErrorNotification\r\n                            role=\"alert\"\r\n                            data-testid=\"stale-rates-notification\"\r\n                        >\r\n                            {t('stale_rates_notification')}\r\n                        </ErrorNotification>\r\n                    )}\r\n                    <Layout>\r\n                        <TopSection>\r\n                            <Title>\r\n                                {t(operation)} {fromCurrency.code}\r\n                            </Title>\r\n                            <ExchangeRate data-testid=\"exchange-rate\">\r\n                                <IconWrapper>\r\n                                    <AiOutlineLineChart />\r\n                                </IconWrapper>\r\n                                {fromCurrency.format(1)} ={' '}\r\n                                {toCurrency.format(priceForOneUnit)}\r\n                            </ExchangeRate>\r\n                            <CurrencyInputPair\r\n                                from={{\r\n                                    balance: fromBalance,\r\n                                    currency: fromCurrency,\r\n                                    onCurrencyChange: updateFromCurrency,\r\n                                    value: fromValue,\r\n                                    onValueChange: updateFromValue,\r\n                                }}\r\n                                to={{\r\n                                    balance: toBalance,\r\n                                    currency: toCurrency,\r\n                                    onCurrencyChange: updateToCurrency,\r\n                                    value: toValue,\r\n                                    onValueChange: updateToValue,\r\n                                }}\r\n                                operation={operation}\r\n                                onActiveInputChange={setActiveInput}\r\n                                onOperationChange={toggleOperation}\r\n                            ></CurrencyInputPair>\r\n                        </TopSection>\r\n                        <BottomSection>\r\n                            <ExchangeButton\r\n                                disabled={isExchangeButtonDisabled}\r\n                                onClick={exchange}\r\n                                data-testid=\"exchange-button\"\r\n                            >\r\n                                {t(\r\n                                    operation === Operation.Buy\r\n                                        ? 'buy_with'\r\n                                        : 'sell_to',\r\n                                    {\r\n                                        curOne: fromCurrency.code,\r\n                                        curTwo: toCurrency.code,\r\n                                    }\r\n                                )}\r\n                            </ExchangeButton>\r\n                        </BottomSection>\r\n                    </Layout>\r\n                </Wrapper>\r\n            </Page>\r\n            {isSuccessNotificationOpen && (\r\n                <SuccessfulExchangeNotification\r\n                    fromCurrency={sellingCurrency}\r\n                    fromAmount={sellingAmount}\r\n                    toCurrency={buyingCurrency}\r\n                    toAmount={buyingAmount}\r\n                    onClose={() => setIsSuccessNotificationOpen(false)}\r\n                />\r\n            )}\r\n        </>\r\n    );\r\n}\r\n\r\nexport default ExchangePage;\r\n","import ExchangePage from './ExchangePage';\r\n\r\nexport default ExchangePage;\r\n","import styled from 'styled-components';\nimport { Colors } from '../../common-styles/colors';\n\nexport const Container = styled.div`\n    display: flex;\n    justify-content: center;\n    width: 100vw;\n    height: 100vh;\n    background-color: ${Colors.AppBackground};\n`;\n","import React from 'react';\nimport DataProvider from '../DataProvider';\nimport ErrorBoundary from '../ErrorBoundary';\nimport ExchangePage from '../ExchangePage';\nimport { Container } from './style';\n\nfunction App() {\n    return (\n        <ErrorBoundary>\n            <Container>\n                <DataProvider>\n                    <ExchangePage></ExchangePage>\n                </DataProvider>\n            </Container>\n        </ErrorBoundary>\n    );\n}\n\nexport default App;\n","import App from './App';\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import('web-vitals').then(\n            ({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n                getCLS(onPerfEntry);\n                getFID(onPerfEntry);\n                getFCP(onPerfEntry);\n                getLCP(onPerfEntry);\n                getTTFB(onPerfEntry);\n            }\n        );\n    }\n};\n\nexport default reportWebVitals;\n","import i18n from 'i18next';\r\nimport { initReactI18next } from 'react-i18next';\r\nimport en from './i18n/en.json';\r\n\r\ni18n.use(initReactI18next).init({\r\n    resources: {\r\n        en: { translation: en },\r\n    },\r\n    lng: 'en',\r\n    fallbackLng: 'en',\r\n});\r\n\r\nexport default i18n;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'typeface-roboto';\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\nimport './i18n';\nimport './style.css';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}